version: '3.8'  # Specify the version of the Docker Compose file format

services:
  # Nginx Web Server
  web:
    container_name: nginx_web
    image: nginx:latest  # Use the latest official Nginx image
    ports:
      - "80:80"  # Map port 80 on the host to port 80 in the container
    volumes:
      - ./src:/var/www/html  # Mount the 'src' directory to the web root inside the container
      - ./Docker/nginx.conf:/etc/nginx/conf.d/default.conf  # Use a custom Nginx configuration
    depends_on:
      - app  # Ensure PHP-FPM service is started before Nginx
    networks:
      - app_network

  # PHP-FPM Service
  app:
    container_name: php_fpm_app
    build:
      context: .  # Use the current directory to build the Dockerfile
      dockerfile: Dockerfile  # Specify the Dockerfile
    volumes:
      - ./src:/var/www/html  # Mount the 'src' directory to the web root inside the container
    depends_on:
      - composer  # Ensure Composer runs before starting the app service
      - mysql     # Ensure MySQL is started before the app service
    networks:
      - app_network

  # Composer service for managing PHP dependencies
  composer:
    container_name: composer_service
    image: composer:2.2  # Use the official Composer image, version 2.2
    working_dir: /var/www/html  # Set the working directory inside the container
    volumes:
      - ./src:/var/www/html  # Mount the 'src' directory to the working directory in the container
    entrypoint:  # Override the entrypoint to run Composer commands with specified options
      - composer
      - "--ignore-platform-reqs"  # Ignore platform requirements during installation
      - "--no-progress"  # Disable progress display for cleaner output
      - "--no-ansi"  # Disable ANSI colors in the output
    command: ["install"]  # Install PHP dependencies defined in composer.json

  # MySQL service for database interactions
  mysql:
    container_name: mysql_db
    image: mysql:8.3  # Use MySQL version 8.3
    ports:
      - '${DB_PORT:-3306}:3306'  # Dynamically set the port with an optional environment variable
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'  # Use environment variables for sensitive data
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: '${DB_DATABASE}'  # Set the database name from the environment
      MYSQL_USER: '${DB_USERNAME}'  # Set the database user from the environment
      MYSQL_PASSWORD: '${DB_PASSWORD}'  # Set the database password from the environment
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'  # Optionally allow empty passwords
    volumes:
      - mysql_data:/var/lib/mysql  # Store MySQL data in a named volume
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]  # Check if MySQL is available
      interval: 10s  # Check every 10 seconds
      retries: 3  # Retry 3 times before marking as unhealthy
      timeout: 5s  # Timeout after 5 seconds

networks:
  app_network:
    driver: bridge  # Use the default bridge network driver

volumes:
  mysql_data:
    driver: local  # Use local storage for MySQL data
